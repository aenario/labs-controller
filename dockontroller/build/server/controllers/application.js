// Generated by CoffeeScript 1.7.1
var DockerCommander, commander, utils;

DockerCommander = require('../lib/controller');

utils = require('../middlewares/utils');

commander = new DockerCommander();

module.exports.start = function(req, res, next) {
  var app, name;
  app = req.body.start;
  name = app.name;
  if (name === 'data-system') {
    if (commander.exist(name)) {
      return commander.startDataSystem(function(err) {
        if (err != null) {
          next(err);
        }
        return res.send(200, app);
      });
    } else {
      return commander.install("mycozycloud/" + name, 'latest', {
        env: [
          {
            'name': name,
            'token': utils.getToken()
          }
        ]
      }, (function(_this) {
        return function(err) {
          if (err != null) {
            next(err);
          }
          return commander.startDataSystem(name, function(err) {
            if (err != null) {
              next(err);
            }
            return res.send(200, app);
          });
        };
      })(this));
    }
  } else if (name === 'proxy') {
    if (commander.exist("proxy")) {
      return commander.startProxy(function(err, app) {
        if (err != null) {
          next(err);
        }
        return res.send(200, app);
      });
    } else {
      return commander.installProxy(function(err) {
        if (err != null) {
          next(err);
        }
        return commander.startProxy(function(err, app) {
          if (err != null) {
            next(err);
          }
          return res.send(200, app);
        });
      });
    }
  } else {
    if (commander.exist(name)) {
      return commander.startApplication(name, (function(_this) {
        return function(err, image, port) {
          if (err != null) {
            next(err);
          }
          app.port = port;
          return res.send(200, app);
        };
      })(this));
    } else {
      if (name === 'home') {
        app.password = utils.getToken();
      }
      return commander.install("mycozycloud/" + name, 'latest', {
        env: [
          {
            'name': name,
            'token': app.password
          }
        ]
      }, (function(_this) {
        return function(err) {
          if (err != null) {
            next(err);
          }
          return commander.startApplication(name, function(err) {
            if (err != null) {
              next(err);
            }
            return res.send(200, app);
          });
        };
      })(this));
    }
  }
};

module.exports.stop = function(req, res, next) {
  var app;
  app = req.body.stop;
  return commander.stop(app.name, function(err, image) {
    if (err != null) {
      next(err);
    }
    return res.send(200, {});
  });
};

module.exports.clean = function(req, res, next) {
  var name;
  name = req.body;
  return commander.uninstall(name, function(err) {
    if (err != null) {
      next(err);
    }
    return res.send(200, {});
  });
};
