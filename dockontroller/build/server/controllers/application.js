// Generated by CoffeeScript 1.7.1
var DockerCommander, commander, install, utils;

DockerCommander = require('../lib/controller');

utils = require('../middlewares/utils');

commander = new DockerCommander();

install = function(name, app, cb) {
  return commander.exist(name, function(err, docExist) {
    var docker;
    if (err) {
      return cb(err);
    }
    if (!docExist) {
      if (name === 'home' || name === 'proxy' || name === 'datasystem') {
        app.password = utils.getToken();
      }
      docker = app.repository.url.split('/')[3];
      if (docker === "mycozycloud") {
        docker = "cozy";
      }
      return commander.install("" + docker + "/" + name, 'latest', {}, (function(_this) {
        return function(err) {
          return cb(err);
        };
      })(this));
    } else {
      return cb();
    }
  });
};

module.exports.start = function(req, res, next) {
  var app, name;
  app = req.body.start;
  name = app.name;
  return install(name, app, (function(_this) {
    return function(err) {
      var docker, env;
      if (err != null) {
        next(err);
      }
      switch (name) {
        case 'data-system':
          return commander.startDataSystem(function(err) {
            if (err != null) {
              next(err);
            }
            return res.send(200, app);
          });
        case 'couchdb':
          return commander.startCouch(function(err) {
            if (err != null) {
              next(err);
            }
            return res.send(200, app);
          });
        case 'proxy':
          return commander.startProxy(function(err, app) {
            if (err != null) {
              next(err);
            }
            return res.send(200, app);
          });
        default:
          env = "NAME=" + name + " TOKEN=" + app.password;
          docker = app.repository.url.split('/')[3];
          return commander.startApplication("" + docker + "/" + name, env, function(err, image, port) {
            if (err != null) {
              next(err);
            }
            app.port = port;
            return res.send(200, {
              drone: app
            });
          });
      }
    };
  })(this));
};

module.exports.stop = function(req, res, next) {
  var app;
  app = req.body.stop;
  return commander.exist(app.name, function(err, docExist) {
    if (err) {
      return cb(err);
    }
    if (docExist) {
      return commander.stop(app.name, function(err, image) {
        if (err != null) {
          next(err);
        }
        return res.send(200, {});
      });
    } else {
      return res.send(404, {});
    }
  });
};

module.exports.update = function(req, res, next) {
  var app;
  app = req.body.update;
  return commander.exist(app.name, function(err, docExist) {
    var docker, env;
    if (err) {
      return cb(err);
    }
    if (docExist) {
      env = "NAME=" + app.name + " TOKEN=" + app.password;
      docker = app.repository.url.split('/')[3];
      return commander.updateApplication("" + docker + "/" + app.name, env, (function(_this) {
        return function(err, image, port) {
          if (err != null) {
            next(err);
          }
          app.port = port;
          return res.send(200, {
            drone: app
          });
        };
      })(this));
    }
  });
};

module.exports.clean = function(req, res, next) {
  var app;
  app = req.body;
  return commander.exist(app.name, function(err, docExist) {
    if (err) {
      return cb(err);
    }
    if (docExist) {
      return commander.uninstallApplication(app.name, function(err) {
        if (err != null) {
          next(err);
        }
        return res.send(200, {});
      });
    } else {
      return res.send(404, {});
    }
  });
};

module.exports.running = function(req, res, next) {
  return commander.running(function(err, result) {
    if (err) {
      return nex(err);
    }
    return res.send(200, result);
  });
};
